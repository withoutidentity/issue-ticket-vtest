generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String // Hashed password
  name          String
  role          Role     @default(USER)
  department_id Int?
  is_officer_confirmed Boolean  @default(false) // สถานะการยืนยันสำหรับ Office
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  refreshToken  String? // สำหรับ Refresh Token

  department       Department?    @relation(fields: [department_id], references: [id])
  tickets          Ticket[]
  tickets_assigned Ticket[]       @relation("TicketAssignee")
  uploadedFiles    AssigneeFile[] @relation("UserUploadedFiles")

  @@map("users")
}

model Ticket {
  id            Int             @id @default(autoincrement())
  user_id       Int?
  assignee_id   Int? // ผู้รับผิดชอบ
  title         String          @db.VarChar(255)
  description   String?
  type_id       Int?
  priority      TicketPriority?
  contact       String?         @db.VarChar(255)
  department_id Int? // FK -> Department
  comment       String?
  status        TicketStatus    @default(open)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())

  // Relations
  ticket_types  ticket_types?  @relation(fields: [type_id], references: [id])
  user          User?          @relation(fields: [user_id], references: [id])
  assignee      User?          @relation("TicketAssignee", fields: [assignee_id], references: [id])
  department    Department?    @relation(fields: [department_id], references: [id])
  files         TicketFile[] // แนบหลายไฟล์ต่อ Ticket
  assigneeFiles AssigneeFile[]

  @@index([type_id], map: "idx_tickets_type_id")
  @@map("tickets")
}

model ticket_types {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  tickets     Ticket[]
}

model TicketFile {
  id        Int      @id @default(autoincrement())
  ticket_id Int
  filename  String   @db.VarChar(255)
  filepath  String   @db.VarChar(512)
  uploaded  DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticket_id], references: [id])

  @@index([ticket_id])
  @@map("ticket_files")
}

model AssigneeFile {
  id            Int      @id @default(autoincrement())
  ticket_id     Int
  uploadedBy_id Int
  filename      String
  filepath      String
  uploadedAt    DateTime @default(now())

  ticket     Ticket @relation(fields: [ticket_id], references: [id])
  uploadedBy User   @relation("UserUploadedFiles", fields: [uploadedBy_id], references: [id])

  @@index([ticket_id])
  @@index([uploadedBy_id])
  @@map("assignee_ticket_files")
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(255)
  tickets Ticket[] // ความสัมพันธ์กับ Ticket
  users   User[] // เพิ่ม relation กับ User

  @@map("departments")
}

enum Role {
  USER
  OFFICER
  ADMIN
  BANNED
}

enum TicketStatus {
  open
  in_progress
  pending
  closed
}

enum TicketPriority {
  low
  medium
  high
}
