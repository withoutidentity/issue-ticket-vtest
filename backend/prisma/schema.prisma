generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  password             String
  name                 String
  role                 Role                 @default(USER)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  refreshToken         String?
  department_id        Int?
  is_officer_confirmed Boolean              @default(false)
  uploadedFiles        AssigneeFile[]       @relation("UserUploadedFiles")
  passwordResetTokens  PasswordResetToken[]
  actionLogs           TicketLog[]
  tickets_assigned     Ticket[]             @relation("TicketAssignee")
  tickets              Ticket[]
  department           Department?          @relation(fields: [department_id], references: [id])

  @@map("users")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique @map("token_hash")
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Ticket {
  id               Int             @id @default(autoincrement())
  user_id          Int?
  assignee_id      Int?
  title            String          @db.VarChar(255)
  description      String?
  type_id          Int?
  priority         TicketPriority?
  contact          String?         @db.VarChar(255)
  department_id    Int?
  status           TicketStatus    @default(open)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @default(now())
  comment          String?
  reference_number String?         @unique @db.VarChar(255)
  assigneeFiles    AssigneeFile[]
  files            TicketFile[]
  logs             TicketLog[]
  assignee         User?           @relation("TicketAssignee", fields: [assignee_id], references: [id])
  department       Department?     @relation(fields: [department_id], references: [id])
  ticket_types     ticket_types?   @relation(fields: [type_id], references: [id])
  user             User?           @relation(fields: [user_id], references: [id])

  @@index([type_id], map: "idx_tickets_type_id")
  @@map("tickets")
}

model TicketLog {
  id                 Int           @id @default(autoincrement())
  ticket_id          Int
  user_id            Int?
  user_name_snapshot String?
  action_type        LogActionType
  field_changed      String?
  old_value          String?
  new_value          String?
  details            String
  timestamp          DateTime      @default(now())
  ticket             Ticket        @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  user               User?         @relation(fields: [user_id], references: [id])

  @@index([ticket_id])
  @@index([user_id])
  @@map("ticket_logs")
}

model ticket_types {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  tickets     Ticket[]
}

model TicketFile {
  id        Int      @id @default(autoincrement())
  ticket_id Int
  filename  String   @db.VarChar(255)
  filepath  String   @db.VarChar(512)
  uploaded  DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticket_id], references: [id])

  @@index([ticket_id])
  @@map("ticket_files")
}

model AssigneeFile {
  ticket_id     Int
  uploadedBy_id Int
  filename      String
  filepath      String
  uploadedAt    DateTime @default(now())
  id            Int      @id @default(autoincrement())
  ticket        Ticket   @relation(fields: [ticket_id], references: [id])
  uploadedBy    User     @relation("UserUploadedFiles", fields: [uploadedBy_id], references: [id])

  @@index([ticket_id])
  @@index([uploadedBy_id])
  @@map("assignee_ticket_files")
}

model Department {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(255)
  tickets Ticket[]
  users   User[]

  @@map("departments")
}

enum Role {
  USER
  OFFICER
  ADMIN
  BANNED
}

enum TicketStatus {
  open
  in_progress
  pending
  closed
}

enum TicketPriority {
  low
  medium
  high
}

enum LogActionType {
  TICKET_CREATED
  TITLE_UPDATED
  DESCRIPTION_UPDATED
  TYPE_UPDATED
  PRIORITY_UPDATED
  CONTACT_UPDATED
  DEPARTMENT_UPDATED
  STATUS_CHANGED
  ASSIGNEE_CHANGED
  COMMENT_UPDATED
  REQUESTER_FILE_ADDED
  REQUESTER_FILE_REMOVED
  ASSIGNEE_FILE_ADDED
  ASSIGNEE_FILE_REMOVED
}
